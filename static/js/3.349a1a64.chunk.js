(this["webpackJsonpreadme-react-go"]=this["webpackJsonpreadme-react-go"]||[]).push([[3],{324:function(n,t,e){"use strict";e.r(t);t.default='\nimport { useReducer } from "react"\nimport {nanoid} from "nanoid"\n\ntype TListItem = {\n  keyId: string\n  text: string\n}\n\nenum TActionType {\n  add,\n  remove,\n  reset,\n  search\n}\n\ntype TAction = {\n  type: TActionType\n  keyId?: string\n}\n\nconst initList: TListItem[] = [] // reduer \u521d\u59cb\u5316\u6570\u636e\uff0c\u7a7a\u6570\u7ec4\n\nfunction initListFunc(initData: TListItem[]) { // reducer \u6570\u636e\u521d\u59cb\u5316\u51fd\u6570\uff0c\u52a0\u5de5\u521d\u59cb\u5316\u6570\u636e\uff0c\u5c06\u521d\u59cb\u5316\u6570\u636e\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\n  const textArr = [\n    \'\u5173\u4e8e react/fre\',\n    \'egg.js \u4e2dgrpc\u7684\u6b63\u786e\u4f7f\u7528\u65b9\u5f0f\u662f\u4ec0\u4e48\uff1f\',\n    \'\u6df1\u5165\u7406\u89e3\u51fd\u6570\u8c03\u7528\u539f\u7406\'\n  ]\n  initData = textArr.map(item => ({\n    text: item,\n    keyId: nanoid(5)\n  }))\n  return initData\n}\n\n// reducer \u51fd\u6570\u8fd4\u56de\u5f00\u53d1\u6240\u9700\u76ee\u6807\u6570\u636e\nfunction reducer(data: TListItem[], action: TAction) {\n  let copyData = [...data] // \u4fdd\u8bc1\u8fd4\u56de\u7684\u662f data \u526f\u672c\uff08\u6709\u53ef\u80fd\u662f\u6d45\u62f7\u8d1d\uff09\n  switch (action.type) { // \u66f4\u65b0\u6570\u636e\u65b9\u5f0f\uff08\u7c7b\u578b\uff09\uff1aaction.type\n    case TActionType.add: // \u901a\u8fc7 add \u65b9\u5f0f\u66f4\u65b0\u6570\u636e\n      copyData.unshift({\n        text: nanoid(),\n        keyId: nanoid(5)\n      })\n      break\n    case TActionType.remove:\n      copyData = copyData.filter(item => item.keyId !== action.keyId)\n      break\n    case TActionType.search:\n      if (action.keyId) {\n        copyData = copyData.filter(item => item.keyId === action.keyId)\n      } else {\n        copyData = initListFunc(initList) // \u8c03\u7528 reducer \u521d\u59cb\u5316\u51fd\u6570\u8fdb\u884c\u6570\u636e\u91cd\u7f6e\n      }\n      break\n    case TActionType.reset:\n      copyData = initListFunc(initList) // \u8c03\u7528 reducer \u521d\u59cb\u5316\u51fd\u6570\u8fdb\u884c\u6570\u636e\u91cd\u7f6e\n      break\n    default:\n      throw new Error(`${action.type} \u9519\u8bef`)\n  }\n  return copyData\n}\n\n\nexport default function ReducerDemo() {\n  // list \u662f\u521d\u59cb\u5316\u6570\u636e\n  // dispatchList \u7c7b\u578b\u4e3a\u51fd\u6570\uff0c\u66f4\u65b0\u6570\u636e\u89e6\u53d1\u5668\n  const [list, dispatchList] = useReducer(reducer, initList, initListFunc)\n  return (\n    <div className="text-center">\n      <input type="text"\n        className="form-control"\n        placeholder="\u8f93\u5165 id \u641c\u7d22"\n        onChange={(ev) => dispatchList({ // dispatchList \u89e6\u53d1 search \u7c7b\u578b\u66f4\u65b0\u5217\u8868\n          type: TActionType.search,\n          keyId: ev.target.value.trim()\n        })}\n      />\n      <ul className="list-group my-4">\n        {\n          list.map(item => (\n            <li\n              className="list-group-item d-flex align-items-center justify-content-between"\n              key={item.keyId}\n            >\n              <p>\n                <span className="badge badge-info h5 mr-3">{item.keyId}</span>\n                {item.text}\n              </p>\n              <div>\n                <button\n                  className="btn btn-primary"\n                  onClick={() => dispatchList({\n                    type: TActionType.add\n                  })}\n                >\u65b0\u589e item</button>\n                <button\n                  className="btn btn-primary ml-3"\n                  onClick={() => dispatchList({\n                    type: TActionType.remove, // dispatchList \u89e6\u53d1 remove \u7c7b\u578b\u66f4\u65b0\u5217\u8868\n                    keyId: item.keyId.trim()\n                  })}\n                >\u79fb\u9664 item</button>\n              </div>\n            </li>\n          ))\n        }\n      </ul>\n      <button\n        className="btn btn-primary"\n        onClick={() => dispatchList({\n          type: TActionType.reset\n        })}\n      >\u91cd\u7f6e item</button>\n    </div>\n  )\n}\n'}}]);
//# sourceMappingURL=3.349a1a64.chunk.js.map