{"version":3,"sources":["views/ReducerDemo.source.js"],"names":["sourceCode"],"mappings":"0HACA,OAyHeA,UAzHC","file":"static/js/3.349a1a64.chunk.js","sourcesContent":["\nconst sourceCode = `\nimport { useReducer } from \"react\"\nimport {nanoid} from \"nanoid\"\n\ntype TListItem = {\n  keyId: string\n  text: string\n}\n\nenum TActionType {\n  add,\n  remove,\n  reset,\n  search\n}\n\ntype TAction = {\n  type: TActionType\n  keyId?: string\n}\n\nconst initList: TListItem[] = [] // reduer 初始化数据，空数组\n\nfunction initListFunc(initData: TListItem[]) { // reducer 数据初始化函数，加工初始化数据，将初始化数据作为默认参数\n  const textArr = [\n    '关于 react/fre',\n    'egg.js 中grpc的正确使用方式是什么？',\n    '深入理解函数调用原理'\n  ]\n  initData = textArr.map(item => ({\n    text: item,\n    keyId: nanoid(5)\n  }))\n  return initData\n}\n\n// reducer 函数返回开发所需目标数据\nfunction reducer(data: TListItem[], action: TAction) {\n  let copyData = [...data] // 保证返回的是 data 副本（有可能是浅拷贝）\n  switch (action.type) { // 更新数据方式（类型）：action.type\n    case TActionType.add: // 通过 add 方式更新数据\n      copyData.unshift({\n        text: nanoid(),\n        keyId: nanoid(5)\n      })\n      break\n    case TActionType.remove:\n      copyData = copyData.filter(item => item.keyId !== action.keyId)\n      break\n    case TActionType.search:\n      if (action.keyId) {\n        copyData = copyData.filter(item => item.keyId === action.keyId)\n      } else {\n        copyData = initListFunc(initList) // 调用 reducer 初始化函数进行数据重置\n      }\n      break\n    case TActionType.reset:\n      copyData = initListFunc(initList) // 调用 reducer 初始化函数进行数据重置\n      break\n    default:\n      throw new Error(\\`\\${action.type} 错误\\`)\n  }\n  return copyData\n}\n\n\nexport default function ReducerDemo() {\n  // list 是初始化数据\n  // dispatchList 类型为函数，更新数据触发器\n  const [list, dispatchList] = useReducer(reducer, initList, initListFunc)\n  return (\n    <div className=\"text-center\">\n      <input type=\"text\"\n        className=\"form-control\"\n        placeholder=\"输入 id 搜索\"\n        onChange={(ev) => dispatchList({ // dispatchList 触发 search 类型更新列表\n          type: TActionType.search,\n          keyId: ev.target.value.trim()\n        })}\n      />\n      <ul className=\"list-group my-4\">\n        {\n          list.map(item => (\n            <li\n              className=\"list-group-item d-flex align-items-center justify-content-between\"\n              key={item.keyId}\n            >\n              <p>\n                <span className=\"badge badge-info h5 mr-3\">{item.keyId}</span>\n                {item.text}\n              </p>\n              <div>\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => dispatchList({\n                    type: TActionType.add\n                  })}\n                >新增 item</button>\n                <button\n                  className=\"btn btn-primary ml-3\"\n                  onClick={() => dispatchList({\n                    type: TActionType.remove, // dispatchList 触发 remove 类型更新列表\n                    keyId: item.keyId.trim()\n                  })}\n                >移除 item</button>\n              </div>\n            </li>\n          ))\n        }\n      </ul>\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => dispatchList({\n          type: TActionType.reset\n        })}\n      >重置 item</button>\n    </div>\n  )\n}\n`\n\nexport default sourceCode"],"sourceRoot":""}